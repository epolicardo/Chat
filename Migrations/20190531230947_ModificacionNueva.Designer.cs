// <auto-generated />
using System;
using Chat.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Chat.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20190531230947_ModificacionNueva")]
    partial class ModificacionNueva
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Chat.Data.Entities.Alumnos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Alumnos");
                });

            modelBuilder.Entity("Chat.Data.Entities.Archivos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Ruta");

                    b.HasKey("Id");

                    b.ToTable("Archivos");
                });

            modelBuilder.Entity("Chat.Data.Entities.Asistencias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AlumnoId");

                    b.Property<int?>("AulaId");

                    b.Property<DateTime>("Fecha");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoId");

                    b.HasIndex("AulaId");

                    b.ToTable("Asistencias");
                });

            modelBuilder.Entity("Chat.Data.Entities.Aulas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MateriaId");

                    b.Property<int?>("ProfesorId");

                    b.HasKey("Id");

                    b.HasIndex("MateriaId");

                    b.HasIndex("ProfesorId");

                    b.ToTable("Aulas");
                });

            modelBuilder.Entity("Chat.Data.Entities.Barrios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Barrio");

                    b.HasKey("Id");

                    b.ToTable("Barrios");
                });

            modelBuilder.Entity("Chat.Data.Entities.CursosAlumnos", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AlumnoIdId");

                    b.Property<int?>("CursoIdId");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoIdId");

                    b.HasIndex("CursoIdId");

                    b.ToTable("CursosAlumnos");
                });

            modelBuilder.Entity("Chat.Data.Entities.Domicilios", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BarrioId");

                    b.Property<string>("Calle");

                    b.Property<string>("Dpto");

                    b.Property<int?>("LocalidadId");

                    b.Property<string>("Nro");

                    b.Property<string>("Piso");

                    b.HasKey("Id");

                    b.HasIndex("BarrioId");

                    b.HasIndex("LocalidadId");

                    b.ToTable("Domicilios");
                });

            modelBuilder.Entity("Chat.Data.Entities.Localidades", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Localidad");

                    b.HasKey("Id");

                    b.ToTable("Localidades");
                });

            modelBuilder.Entity("Chat.Data.Entities.Materias", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Nombre");

                    b.HasKey("Id");

                    b.ToTable("Materias");
                });

            modelBuilder.Entity("Chat.Data.Entities.Mensajes", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CuerpoMensaje");

                    b.Property<string>("EmisorId");

                    b.Property<DateTime>("FechaEnviado");

                    b.Property<int?>("SalaId");

                    b.HasKey("Id");

                    b.HasIndex("EmisorId");

                    b.HasIndex("SalaId");

                    b.ToTable("Mensajes");
                });

            modelBuilder.Entity("Chat.Data.Entities.Notas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AlumnoId");

                    b.Property<int?>("AulaId");

                    b.Property<decimal>("Calificacion");

                    b.Property<DateTime>("Fecha");

                    b.HasKey("Id");

                    b.HasIndex("AlumnoId");

                    b.HasIndex("AulaId");

                    b.ToTable("Notas");
                });

            modelBuilder.Entity("Chat.Data.Entities.Personas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apellido")
                        .IsRequired();

                    b.Property<string>("Documento");

                    b.Property<string>("Domicilio");

                    b.Property<DateTime>("FechaNacimiento");

                    b.Property<int>("Genero");

                    b.Property<string>("LugarNacimiento");

                    b.Property<string>("Nombre")
                        .IsRequired();

                    b.Property<string>("TelefonoFijo");

                    b.Property<int>("TipoDocumento");

                    b.HasKey("Id");

                    b.ToTable("Personas");
                });

            modelBuilder.Entity("Chat.Data.Entities.Profesores", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UsuariosId");

                    b.HasKey("Id");

                    b.HasIndex("UsuariosId");

                    b.ToTable("Profesores");
                });

            modelBuilder.Entity("Chat.Data.Entities.Salas", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasKey("Id");

                    b.ToTable("Salas");
                });

            modelBuilder.Entity("Chat.Data.Entities.Usuarios", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("Email");

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail");

                    b.Property<string>("NormalizedUserName");

                    b.Property<string>("PasswordHash");

                    b.Property<int?>("PersonaId");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("PersonaId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Chat.Data.Entities.Alumnos", b =>
                {
                    b.HasOne("Chat.Data.Entities.Usuarios", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId");
                });

            modelBuilder.Entity("Chat.Data.Entities.Asistencias", b =>
                {
                    b.HasOne("Chat.Data.Entities.Alumnos", "Alumno")
                        .WithMany()
                        .HasForeignKey("AlumnoId");

                    b.HasOne("Chat.Data.Entities.Aulas", "Aula")
                        .WithMany()
                        .HasForeignKey("AulaId");
                });

            modelBuilder.Entity("Chat.Data.Entities.Aulas", b =>
                {
                    b.HasOne("Chat.Data.Entities.Materias", "Materia")
                        .WithMany()
                        .HasForeignKey("MateriaId");

                    b.HasOne("Chat.Data.Entities.Profesores", "Profesor")
                        .WithMany("Aulas")
                        .HasForeignKey("ProfesorId");
                });

            modelBuilder.Entity("Chat.Data.Entities.CursosAlumnos", b =>
                {
                    b.HasOne("Chat.Data.Entities.Alumnos", "AlumnoId")
                        .WithMany()
                        .HasForeignKey("AlumnoIdId");

                    b.HasOne("Chat.Data.Entities.Aulas", "CursoId")
                        .WithMany()
                        .HasForeignKey("CursoIdId");
                });

            modelBuilder.Entity("Chat.Data.Entities.Domicilios", b =>
                {
                    b.HasOne("Chat.Data.Entities.Barrios", "Barrio")
                        .WithMany()
                        .HasForeignKey("BarrioId");

                    b.HasOne("Chat.Data.Entities.Localidades", "Localidad")
                        .WithMany()
                        .HasForeignKey("LocalidadId");
                });

            modelBuilder.Entity("Chat.Data.Entities.Mensajes", b =>
                {
                    b.HasOne("Chat.Data.Entities.Usuarios", "Emisor")
                        .WithMany()
                        .HasForeignKey("EmisorId");

                    b.HasOne("Chat.Data.Entities.Salas", "Sala")
                        .WithMany()
                        .HasForeignKey("SalaId");
                });

            modelBuilder.Entity("Chat.Data.Entities.Notas", b =>
                {
                    b.HasOne("Chat.Data.Entities.Alumnos", "Alumno")
                        .WithMany()
                        .HasForeignKey("AlumnoId");

                    b.HasOne("Chat.Data.Entities.Aulas", "Aula")
                        .WithMany()
                        .HasForeignKey("AulaId");
                });

            modelBuilder.Entity("Chat.Data.Entities.Profesores", b =>
                {
                    b.HasOne("Chat.Data.Entities.Usuarios", "Usuarios")
                        .WithMany()
                        .HasForeignKey("UsuariosId");
                });

            modelBuilder.Entity("Chat.Data.Entities.Usuarios", b =>
                {
                    b.HasOne("Chat.Data.Entities.Personas", "Persona")
                        .WithMany()
                        .HasForeignKey("PersonaId");
                });
#pragma warning restore 612, 618
        }
    }
}
